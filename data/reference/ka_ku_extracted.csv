ka_code,ka_name,ku_name,description
AI,Artificial Intelligence,Fundamental Issues,"Explore the fundamental issues of artificial intelligence, including the nature of intelligence, whether machines can possess consciousness, and the ethical and philosophical questions surrounding artificial intelligence."
AI,Artificial Intelligence,Search,"Exploring search problems in the field of artificial intelligence, involving the representation of state spaces, graph search algorithms (such as depth-first search, breadth-first search, A* search), and heuristic search strategies, used to solve tasks such as path planning and problem-solving."
AI,Artificial Intelligence,Fundamental Knowledge Representation and Reasoning,"Discussing the fundamental methods of knowledge representation and reasoning techniques, including predicate logic, propositional logic, semantic networks, production systems, and the resolution principle, as well as their applications in the field of artificial intelligence, such as expert systems and automated theorem proving."
AI,Artificial Intelligence,Machine Learning,"Explore the fundamental theories, algorithms, and applications of machine learning, including but not limited to supervised learning, unsupervised learning, reinforcement learning, deep learning, and their key roles in pattern recognition, natural language processing, computer vision, and other fields."
AI,Artificial Intelligence,Applications and Societal Impact,"Explore the applications of artificial intelligence technology in various fields, including but not limited to healthcare, finance, education, transportation, and entertainment, as well as the profound impact these applications have on society, economy, and culture. Address social issues such as ethics, privacy, employment, and law, and how artificial intelligence can promote sustainable development and address global challenges."
AI,Artificial Intelligence,Probabilistic Representation and Reasoning,"Discussing probabilistic representation and reasoning techniques, including Bayesian networks, Markov decision processes, hidden Markov models, and probabilistic graphical models, as well as their applications in handling uncertainty, decision-making, and prediction."
AI,Artificial Intelligence,Planning,"Discussing planning problems in the field of artificial intelligence, involving state space search, heuristic algorithms, constraint satisfaction problems, and optimization problems. Introducing how to use graph search, tree search, and logical reasoning to construct and solve planning problems, as well as how to evaluate and select the optimal path or strategy."
AI,Artificial Intelligence,Logical Representation and Reasoning,"Explore logical representation and reasoning techniques, including propositional logic, predicate logic, logical inference rules, and their applications in knowledge representation and automated reasoning."
AI,Artificial Intelligence,Agents and Cognitive Systems,"Discussing the design and implementation of intelligent agents and cognitive systems, as well as their applications in the field of artificial intelligence. This includes the autonomy and interactivity of intelligent agents, and the perception, reasoning, and learning mechanisms of cognitive systems, encompassing key technologies such as rule-based systems, machine learning models, and neural networks in simulating human cognitive processes."
AI,Artificial Intelligence,Natural Language Processing,"Explore natural language processing technologies, including language models, semantic analysis, machine translation, speech recognition and generation, text mining, and the design and implementation of dialogue systems."
AI,Artificial Intelligence,Robotics,"Involves the fundamental theories and applications of robotics, including but not limited to robot perception, navigation, path planning, human-robot interaction, and specific application scenarios in the field of artificial intelligence, such as automation, intelligent manufacturing, and assistive services."
AI,Artificial Intelligence,Perception and Computer Vision,"Discussing perceptual techniques in computer vision, involving key technologies such as image processing, feature extraction, object detection and recognition, and scene understanding. This includes, but is not limited to, the application of convolutional neural networks (CNN) in image classification and object recognition, as well as the role of stereo vision, motion estimation, and optical flow analysis in three-dimensional scene reconstruction and dynamic environment understanding."
AL,Algorithmic Foundations,Foundational Data Structures and Algorithms,"Introduce the principles and implementations of basic data structures and algorithms, including but not limited to arrays, linked lists, stacks, queues, hash tables, trees, graphs, and algorithm design techniques such as sorting, searching, recursion, divide and conquer, and dynamic programming."
AL,Algorithmic Foundations,Algorithmic Strategies,"Discussing algorithm design strategies, including core algorithmic concepts such as divide and conquer, dynamic programming, greedy algorithms, and backtracking, as well as their applications in solving complex problems."
AL,Algorithmic Foundations,Complexity Analysis,"Discussing the analysis of algorithmic time complexity and space complexity, including but not limited to the use of Big O notation, Theta notation, and Omega notation, as well as how to analyze the complexity of recursive algorithms through recursive relations and the Master Theorem."
AL,Algorithmic Foundations,Computational Models and Formal Languages,"Explore the theoretical foundations of computational models, including but not limited to Turing machines, finite automata, regular expressions, and context-free grammars, as well as their applications in describing and analyzing algorithmic complexity."
DM,Data Management,The Role of Data,"Discussing the role and value of data in information systems, including the definition, classification, storage, retrieval, and protection of data, as well as the key role of data in supporting decision-making, optimizing business processes, and facilitating knowledge discovery."
DM,Data Management,Core Database Systems Concepts,"Core concepts of database systems are covered, including data models (such as relational and non-relational models), database design principles (such as normalization theory), data integrity (such as entity integrity and referential integrity), transaction processing mechanisms (such as ACID properties), query optimization techniques, and database concurrency control and recovery techniques."
DM,Data Management,Data Modeling,"Involves the fundamental concepts, methods, and tools of data modeling, including the Entity-Relationship model (ER model), Unified Modeling Language (UML), and the use of data dictionaries. It discusses how these models represent data structures, relationships, and semantics, as well as their applications in database design and data warehouse construction."
DM,Data Management,Relational Databases,"Involves the basic concepts, design principles, and operational techniques of relational databases, including data models, normalization theory, SQL language, transaction processing mechanisms, and database integrity and security."
DM,Data Management,Query Construction,"The fundamental principles and techniques involved in database query construction, including the use of SQL language, query optimization strategies, and how to construct effective data retrieval statements based on different data models (such as relational and non-relational)."
DM,Data Management,Query Processing,"The fundamental principles and techniques involved in database query processing, including query parsing, query optimization, execution plan generation, and data access and manipulation during query execution. Discusses how to efficiently handle SQL queries and how to utilize database features such as indexes, views, and stored procedures to optimize query performance."
DM,Data Management,DBMS Internals,"Explore the internal structure and working principles of Database Management Systems (DBMS), including key technologies such as data storage, indexing mechanisms, query optimization, transaction processing, and concurrency control."
DM,Data Management,NoSQL Systems,"Exploring the design principles and applications of non-relational database systems, involving different types of NoSQL databases such as key-value storage, document storage, column storage, and graph databases, as well as their advantages and challenges in scenarios of big data, high concurrency, and flexible data models."
DM,Data Management,Data Security & Privacy,"Involves principles and practices of data protection, including data encryption, access control, data integrity, privacy protection regulatory compliance, and data breach prevention strategies. Discusses how to implement security measures in databases and data warehouses, as well as how to protect personal and sensitive information from unauthorized access or disclosure through technical means."
DM,Data Management,Data Analytics,"Involving data mining, statistical analysis, and machine learning techniques, it explores how to extract useful information, discover patterns and trends from large-scale datasets, and support decision-making."
DM,Data Management,Distributed Databases/Cloud Computing,"Addresses issues related to data storage, consistency, scalability, and reliability in distributed databases and cloud computing environments. Discusses architectural design of distributed databases, data sharding, replication strategies, and data management services in cloud computing, including but not limited to Database as a Service (DBaaS) and data warehouse solutions."
DM,Data Management,Semi-structured and Unstructured Databases,"Technologies for storage, querying, and management of semi-structured and unstructured databases, including processing of data formats such as XML and JSON, as well as application scenarios for NoSQL databases such as document-oriented, key-value, column-family storage, and graph databases."
FPL,Foundations of Programming Languages,Object-Oriented Programming,"Explore the core concepts of object-oriented programming, including the definition of classes and objects, inheritance, encapsulation, and polymorphism. Discuss object-oriented design principles such as the Single Responsibility Principle, Open/Closed Principle, and Liskov Substitution Principle, as well as how to implement these principles in programming languages."
FPL,Foundations of Programming Languages,Functional Programming,"Explore the core concepts of functional programming, including higher-order functions, function composition, immutable data, recursion, and lazy evaluation, as well as their applications in declarative programming and code modularization."
FPL,Foundations of Programming Languages,Logic Programming,"Discussing the fundamental principles and applications of logic programming, including but not limited to the use of the Prolog language, Horn clause logic, predicate logic, recursive definitions, logical reasoning, and the application of logic programming in artificial intelligence and problem-solving."
FPL,Foundations of Programming Languages,Shell Scripting,"Involves automation and scripting techniques for command-line interfaces, including core concepts such as basic syntax of Bash scripts, flow control, text processing, file operations, and environment variable management."
FPL,Foundations of Programming Languages,Event-Driven and Reactive Programming,"Discussing the fundamental concepts, design patterns, and implementation techniques of event-driven and reactive programming, including event loops, callback functions, asynchronous programming, and the application of reactive programming frameworks."
FPL,Foundations of Programming Languages,Parallel and Distributed Computing,"Involves fundamental concepts, models, and algorithms in parallel and distributed computing, including but not limited to inter-process communication, synchronization mechanisms, parallel programming paradigms, distributed system architectures, and the design and analysis of parallel and distributed algorithms. Discusses how to achieve efficient computation in multi-core processor and distributed network environments, as well as how to manage and optimize resources to ensure program correctness and performance."
FPL,Foundations of Programming Languages,Aspect-Oriented Programming,"Explore the core concepts and key technologies of Aspect-Oriented Programming (AOP), including the definition of aspects, identification of join points, types of advice (such as before, after, and around), and how to apply AOP in programs to achieve separation of concerns, enhancing code modularity and maintainability."
FPL,Foundations of Programming Languages,Type Systems,"Involves the basic concepts and theories of type systems, including but not limited to the differences between static and dynamic typing, type checking mechanisms, type inference algorithms, type safety principles, and the application of type systems in programming language design, aiming to ensure the correctness and predictability of code."
FPL,Foundations of Programming Languages,Systems Execution and Memory Model,"Involves the underlying mechanisms of program execution, including memory models, instruction set architectures, program state transitions, and interactions between operating systems and hardware. Discusses how to ensure program correctness through memory models, as well as synchronization and concurrency control in multi-threaded environments."
FPL,Foundations of Programming Languages,Language Translation and Execution,"Explore the core principles and technologies of compiler design, including lexical analysis, syntax analysis, semantic analysis, intermediate code generation, code optimization, and target code generation of source code. It involves implementation details of the front-end and back-end of compilers, as well as support mechanisms for advanced programming language features such as type systems, scope rules, and memory management."
FPL,Foundations of Programming Languages,Program Abstraction and Representation,"Discussing the fundamental concepts of program abstraction and representation, including but not limited to data abstraction, control abstraction, modularity, encapsulation, and the hierarchy of programs. It involves how to use abstraction to simplify complex program design, as well as the mechanisms for representing these abstractions in programming languages, such as functions, classes, interfaces, and packages."
FPL,Foundations of Programming Languages,Syntax Analysis,"Involves syntax analysis techniques of programming languages, including but not limited to context-free grammars, regular grammars, recursive descent parsing, LL and LR parsing algorithms, as well as the construction process of syntax analysis trees."
FPL,Foundations of Programming Languages,Compiler Semantic Analysis,"Discussing the fundamental principles and implementation techniques of compiler semantic analysis, including syntax-directed translation, attribute grammar, type checking, scope rules, and control flow and data flow analysis."
FPL,Foundations of Programming Languages,Program Analysis and Analyzers,"Explore the fundamental principles and techniques of program analysis and analyzers, including static analysis, dynamic analysis, data flow analysis, control flow analysis, and their applications in detecting program errors, optimizing code performance, and enhancing software security."
FPL,Foundations of Programming Languages,Code Generation,"Key technologies involved in the code generation phase of compilers include intermediate code representation, target code generation, register allocation, instruction selection, and optimization, with the aim of converting high-level language code into machine-executable code."
FPL,Foundations of Programming Languages,Runtime Behavior and Systems,"Discussing the runtime behavior and systems of programming languages, including memory management, garbage collection mechanisms, program execution flow control, exception handling, and runtime support for multithreading and concurrent programming."
GIT,Graphics and Interactive Techniques,Fundamental Concepts,"Introduce the fundamental theories of computer graphics, including geometric transformations, ray tracing, texture mapping, shading models, lighting models, and anti-aliasing techniques, as well as their applications in computer graphics rendering."
GIT,Graphics and Interactive Techniques,Visualization,"Involves data visualization techniques, including but not limited to the representation of 2D and 3D graphics, interactive data exploration tools, information graphic design, and visualization applications in virtual reality and augmented reality."
GIT,Graphics and Interactive Techniques,Applied Rendering and Techniques,"Involving ray tracing and rasterization techniques, including but not limited to the Phong model, ambient occlusion, shadow mapping, anti-aliasing techniques, and the application of multi-channel rendering techniques in graphic rendering."
GIT,Graphics and Interactive Techniques,Geometric Modeling,"Involves fundamental concepts and techniques in geometric modeling, including but not limited to the creation and editing of polygonal meshes, representation of curves and surfaces (such as Bezier curves, NURBS), geometric transformations (translation, rotation, scaling), and the application of geometric data structures (such as octrees, BVH) in graphics and interactive technologies."
GIT,Graphics and Interactive Techniques,Shading and Advanced Rendering,"Discussing lighting models and advanced rendering techniques, including the Phong reflection model, ambient occlusion, shadow mapping, deferred rendering, and ray tracing algorithms, as well as their applications in achieving realistic image rendering."
GIT,Graphics and Interactive Techniques,Computer Animation,"Discussing modeling, motion capture, keyframe animation, and physical simulation techniques in computer animation, covering core concepts such as character animation, animation rendering, and animation compositing, as well as their application scenarios in movies, games, and virtual reality."
GIT,Graphics and Interactive Techniques,Simulation,"Exploring simulation techniques in computer graphics, involving physical simulation, animation generation, and the construction of interactive simulation environments, including but not limited to particle systems, rigid body dynamics, fluid dynamics simulation, and physics-based rendering techniques."
GIT,Graphics and Interactive Techniques,"Immersion (MR, AR, VR)","Explore immersive technologies, including the basic concepts, key technologies, and main application scenarios of Mixed Reality (MR), Augmented Reality (AR), and Virtual Reality (VR), with a focus on how to enhance users' sense of immersion and reality through graphic rendering, interaction design, and perceptual psychology."
GIT,Graphics and Interactive Techniques,Interaction,"Exploring interactive graphics technology, involving user input devices, interactive application design, user interface elements, and performance evaluation of interactive systems."
GIT,Graphics and Interactive Techniques,Image Processing,"Involves fundamental concepts and algorithms in image processing, including but not limited to image enhancement, filtering, edge detection, feature extraction, image segmentation, and image restoration, with the aim of improving image quality, extracting image features, or recovering information from images, providing foundational support for computer graphics and interactive technologies."
GIT,Graphics and Interactive Techniques,Tangible/Physical Computing,"Exploring tangible/physical computing techniques, involving the interaction design between physical interfaces and digital systems, including the application of sensors, actuators, and methods for implementing interactive applications in the physical world."
OS,Operating Systems,Role and Purpose of Operating Systems,"Introduce the basic functions and purposes of operating systems, including process management, memory management, file system management, input/output device management, and user interface, discussing how operating systems act as an abstraction layer between computer hardware and users, facilitating resource allocation, task scheduling, and system security."
OS,Operating Systems,Principles of Operating System,"Explore the fundamental principles of operating systems, including process management, memory management, file systems, input/output systems, and device management, as well as how they coordinate computer hardware and software resources."
OS,Operating Systems,Concurrency,"Involves concurrency control mechanisms in operating systems, including process synchronization, mutual exclusion, and deadlock prevention, avoidance, and resolution strategies, as well as the use and management of concurrent programming models such as threads."
OS,Operating Systems,Protection and Safety,"Involves protection and security mechanisms within operating systems, including access control, permission management, isolation techniques, security policies, and system integrity protection. Discusses how these mechanisms prevent unauthorized access, data leakage, and malware attacks, ensuring system reliability and data security."
OS,Operating Systems,Scheduling,"Involves process and thread scheduling mechanisms in operating systems, including but not limited to First-Come, First-Served (FCFS), Shortest Job First (SJF), Round Robin (RR), and priority scheduling algorithms, as well as their impact on performance and resource allocation in multitasking environments. Discusses real-time scheduling strategies, such as Earliest Deadline First (EDF) and periodic task scheduling, and their role in ensuring system responsiveness and stability."
OS,Operating Systems,Process Model,"Involves the basic concepts of process models, state transitions, and process control mechanisms, including operations such as process creation, termination, blocking, and waking up, as well as synchronization and communication mechanisms between processes."
OS,Operating Systems,Memory Management,"Core concepts and technologies in operating system memory management, including virtual memory, memory allocation strategies, page replacement algorithms, and memory protection and sharing mechanisms."
OS,Operating Systems,Device Management,"Involves device management within operating systems, including the design, implementation, and optimization of device drivers, as well as how to coordinate interactions between hardware devices and the operating system through interrupt handling and I/O requests. Discusses device abstraction, buffer management, device allocation and deallocation strategies, and how to enhance system performance and resource utilization through these mechanisms."
OS,Operating Systems,File Systems API and Implementation,"Involves the design and implementation of file system APIs, including file creation, deletion, reading, and writing operations, as well as the management of file attributes and the structural organization of the file system. Discusses the interface specifications of file systems within operating systems, such as the POSIX standard, and the implementation details and performance optimization strategies of different file systems (e.g., FAT32, NTFS, ext4)."
OS,Operating Systems,Advanced File Systems,"Explore the design principles and implementation techniques of advanced file systems, including but not limited to the hierarchical structure of file systems, data consistency, fault tolerance mechanisms, performance optimization strategies, and the ability to support large-scale parallel processing."
OS,Operating Systems,Virtualization,"Involving virtualization technology in operating systems, including the working principle of the virtual machine monitor, the creation and operation of virtual machines, resource isolation and scheduling strategies, as well as the application of virtualization technology in cloud computing and server management."
OS,Operating Systems,Real-time and Embedded Systems,"Operating system design principles and implementation techniques for real-time and embedded systems, including real-time scheduling algorithms, interrupt handling, task synchronization and communication mechanisms, and system optimization strategies in resource-constrained environments."
PDC,Parallel and Distributed Computing,Programs,"Involves program design in parallel and distributed computing, including the implementation of parallel algorithms, task partitioning, data parallelism and control parallelism, as well as program collaboration and communication mechanisms in distributed systems. Discusses synchronization and mutual exclusion techniques in parallel programs, such as locks, semaphores, and barriers, and analyzes consistency, fault tolerance, and scalability issues in distributed programs."
PDC,Parallel and Distributed Computing,Communication,"Involves communication mechanisms in parallel and distributed computing, including but not limited to Inter-Process Communication (IPC), Message Passing Interface (MPI), Remote Procedure Call (RPC), and network communication protocols (such as TCP/IP). Discusses the design, implementation, and optimization of these communication technologies in multiprocessor systems, distributed systems, and cloud computing environments."
PDC,Parallel and Distributed Computing,Coordination,"Involves coordination mechanisms in concurrent and distributed systems, including synchronization primitives (such as mutexes, semaphores, barriers), consistency models (such as linearizability, sequential consistency), distributed transaction processing, and fault tolerance and recovery strategies in distributed systems."
PDC,Parallel and Distributed Computing,Evaluation,"Performance evaluation methods and techniques for parallel and distributed computing systems, including benchmarking, simulation, analytical models, and performance metrics in real-world application scenarios, with a focus on accurately measuring and analyzing performance indicators of parallel algorithms and distributed systems, such as throughput, latency, scalability, and efficiency."
PDC,Parallel and Distributed Computing,Algorithms,"Discussing the principles of algorithm design in parallel and distributed computing, including but not limited to the time complexity analysis of parallel algorithms, load balancing strategies, synchronization and communication mechanisms, as well as consistency, fault tolerance, and scalability issues in distributed algorithms."
SEC,Security,Foundational Security,"Discussing the fundamental concepts of computer security, including but not limited to confidentiality, integrity, availability, authentication, authorization, and non-repudiation. It involves cryptographic principles, security protocol design, risk assessment, and privacy protection techniques."
SEC,Security,"Society, Ethics, and the Profession","Discussing social ethics and professional ethics in the field of computer security, including data privacy protection, compliance with information security regulations, and ethical decision-making in the process of software development and maintenance."
SEC,Security,Secure Coding,"Best practices and principles in software secure coding, including input validation, error handling, buffer overflow protection, cryptographic applications, and code auditing techniques, aim to reduce software vulnerabilities and enhance system security."
SEC,Security,Cryptography,"Involves the fundamental principles and applications of cryptography, including but not limited to symmetric encryption, asymmetric encryption, hash functions, digital signatures, public key infrastructure (PKI), and the design and analysis of cryptographic protocols, aimed at ensuring the confidentiality, integrity, and authentication of information."
SEC,Security,"Security Analysis, Design, and Engineering","Explore the core concepts of security analysis, design, and engineering, including but not limited to security threat models, risk assessment, secure architectural design, cryptographic applications, secure protocol development, and techniques for detecting and repairing security vulnerabilities. It involves integrating security best practices into the software and system development process to ensure the confidentiality, integrity, and availability of systems."
SEC,Security,Digital Forensics,"Involves the basic principles and techniques of digital forensics, including data recovery, malware analysis, network forensics, and the legal and ethical issues of digital evidence."
SEC,Security,Security Governance,"Involves frameworks and practices in security governance, including the formulation of security policies, risk assessment, compliance management, and security incident response mechanisms. Discusses how to implement effective security controls at the organizational level to ensure the confidentiality, integrity, and availability of information systems and assets."
SEP,"Society, Ethics, and the Profession",Social Context,"Discussing the extensive applications of computer science in society and its impact on individuals and society, including the technological impact on social structure, culture, economy, and ethics, as well as the role and responsibilities of computer professionals within it."
SEP,"Society, Ethics, and the Profession",Methods for Ethical Analysis,"Discussing methods of ethical analysis, including but not limited to moral reasoning, ethical decision-making frameworks, stakeholder analysis, and identification and resolution strategies for ethical dilemmas, aims to cultivate systematic thinking and responsible decision-making in computer science professionals when facing ethical issues in technological development."
SEP,"Society, Ethics, and the Profession",Professional Ethics,"Discussing the standards of professional ethics and codes of conduct for computer science professionals, including but not limited to privacy protection, data security, intellectual property rights, software engineering ethics, and social responsibilities in technological development."
SEP,"Society, Ethics, and the Profession",Intellectual Property,"Discussing the basic concepts of intellectual property, legal frameworks, and their applications in the field of computer science, including copyright, patents, trademarks, and trade secrets, as well as how they impact software development, data protection, and technological innovation."
SEP,"Society, Ethics, and the Profession",Privacy and Civil Liberties,"Exploring mechanisms for the protection of personal privacy and civil liberties, involving the impact and balance of data protection regulations, privacy policy design, and technical implementation on individual privacy rights."
SEP,"Society, Ethics, and the Profession",Communication,"Discussing the communication skills of computer science professionals in social, ethical, and professional domains, including the ability to effectively express technical concepts, write technical documentation, deliver professional presentations, and collaborate in multidisciplinary teams."
SEP,"Society, Ethics, and the Profession",Sustainability,"Discussing the role of computer science in sustainable development, including green computing, energy efficiency optimization, environmental impact assessment, and considering ecological and social responsibilities in the design and implementation of technical solutions."
SF,Systems Fundamentals,Overview of Computer Systems,"Involving the basic composition and working principles of computer systems, including core concepts such as hardware architecture, operating systems, network communication, and data storage, exploring the design principles, performance optimization, and reliability assurance of computer systems."
SF,Systems Fundamentals,Basic Concepts,"Involves the basic composition and working principles of computer systems, including but not limited to hardware architecture, fundamentals of operating systems, data storage and processing, and basic concepts of network communication."
SF,Systems Fundamentals,Resource Management,"Involves resource management within operating systems, including process scheduling, memory management, file system management, and the allocation and scheduling strategies for input/output devices. Discusses how to efficiently utilize and allocate limited hardware resources to enhance system performance and response speed."
SF,Systems Fundamentals,System Performance,"Involves the measurement, analysis, and optimization techniques of system performance, including but not limited to performance metrics (such as throughput, response time, utilization), performance models (such as queue theory), performance evaluation methods (such as benchmarking), and performance optimization strategies (such as load balancing, resource scheduling)."
SF,Systems Fundamentals,Performance Evaluation,"The fundamental concepts, methods, and techniques involved in the performance evaluation of computer systems, including but not limited to the definition of performance metrics, benchmarking, analytical models, simulation, and experimental evaluation. It discusses how to assess key performance indicators such as system efficiency, throughput, response time, and resource utilization through quantitative analysis."
SF,Systems Fundamentals,System Reliability,"Discussing the basic concepts of system reliability, assessment methods, and improvement strategies, including failure mode analysis, redundant design, fault tolerance mechanisms, and system recovery techniques."
SF,Systems Fundamentals,System Security,"The basic concepts, key technologies, and main application scenarios related to computer system security, including but not limited to access control, authentication, encryption techniques, security protocols, malware protection, intrusion detection systems, and security vulnerability analysis and remediation."
AR,Architecture and Organization,Digital Logic and Digital Systems,"Explore the fundamentals of digital logic and the design of digital systems, including Boolean algebra, logic gate circuits, combinational logic, sequential logic, finite state machines, and hierarchical design methods for digital systems."
AR,Architecture and Organization,Machine-Level Data Representation,"Involves data representation methods in computer architecture, including binary encoding, fixed-point and floating-point number representation, byte order (big-endian and little-endian), data alignment, and instruction format. Discusses how these representation methods can optimize data storage and processing efficiency, as well as their impact on program performance."
AR,Architecture and Organization,Assembly Level Machine Organization,"Involving the computer organization at the assembly language level, including the design principles of instruction set architecture (ISA), registers, memory hierarchy, implementation details of data paths and control units, and how these components work together to execute low-level machine instructions."
AR,Architecture and Organization,Memory Hierarchy,"Involves the design and optimization of memory hierarchy in computer architecture, including cache coherence protocols, multi-level cache structures, memory access locality, and virtual memory management techniques."
AR,Architecture and Organization,Interfacing and Communication,"Involves interface design and communication protocols in computer system architecture, including but not limited to interface standards between hardware and software, data transfer protocols, bus structures, and network communication models. Discusses how to achieve effective data exchange and communication in computer systems at different levels, as well as how these interfaces and communication mechanisms affect system performance and reliability."
AR,Architecture and Organization,Functional Organization,"Explore the functional organization of computer systems, including but not limited to processor architecture, memory hierarchy, input/output systems, and the ways they interact, with a focus on how system functionality and performance optimization are achieved through the collaborative operation of hardware and software components."
AR,Architecture and Organization,Performance and Energy Efficiency,"Discussing the performance and energy efficiency of computer systems, involving the impact of processor architecture, memory hierarchy, I/O systems, and network communication on system performance, as well as how to improve the energy efficiency ratio through hardware and software optimization."
AR,Architecture and Organization,Heterogeneous Architectures,"Involves the design principles and implementation of heterogeneous architectures, including the integration and management of different computing resources such as multi-core processors, specialized hardware accelerators, FPGAs, and GPUs, as well as their applications in improving system performance, energy efficiency, and scalability."
AR,Architecture and Organization,Quantum Architectures,"Exploring the architectural design of quantum computers, including the physical implementation of quantum bits, quantum gate operations, quantum error correction mechanisms, and the control and communication interfaces of quantum computers."
FPL,Foundations of Programming Languages,Advanced Programming Constructs,"Explore advanced programming constructs, including but not limited to functional programming paradigms, logic programming, concurrent programming models, and advanced features in object-oriented programming such as in-depth applications of inheritance, polymorphism, and encapsulation."
FPL,Foundations of Programming Languages,Language Pragmatics,"Involving the pragmatics of programming languages, it explores the application and effects of languages in actual programming, including context sensitivity, the impact of language features on program behavior, and the guiding role of language design on programmer behavior."
FPL,Foundations of Programming Languages,Formal Semantics,"Exploring the formal semantics of programming languages, including but not limited to operational semantics, denotational semantics, axiomatic semantics, and type theory, as well as their applications in defining language specifications and implementing compilers."
FPL,Foundations of Programming Languages,Formal Development Methodologies,"Explore formal development methodologies, including but not limited to requirements specifications, design standards, verification and validation techniques, and their applications in programming language design and implementation."
FPL,Foundations of Programming Languages,Design Principles of Programming Languages,"Discussing the principles of programming language design, including but not limited to abstraction, encapsulation, inheritance, and polymorphism as object-oriented features, as well as concepts such as higher-order functions, lazy evaluation, and pattern matching in functional programming, aims to guide the construction of efficient, readable, and maintainable programming languages."
HCI,Human-Computer Interaction,Understanding the User,"Discussing user needs, cognitive processes, and behavioral patterns, including user research methods, user model construction, and user interface design principles, aims to enhance the naturalness and efficiency of human-computer interaction."
HCI,Human-Computer Interaction,Accountability and Responsibility in Design,"Discussing accountability and responsibility in design, involving ethical considerations in user interface and experience design, including privacy protection, data security, and the moral impact of user behavior."
HCI,Human-Computer Interaction,Accessibility and Inclusive Design,"Discussing principles of accessibility and inclusive design, involving technologies and methods that provide accessibility support for users with disabilities and varying ability levels, including but not limited to screen reader compatibility, keyboard navigation, color contrast adjustment, and haptic feedback."
HCI,Human-Computer Interaction,Evaluating the Design,"Discussing the effectiveness of user interfaces and interaction design, involving user testing, usability evaluation methods, and the measurement of performance metrics, including task completion time, error rates, and user satisfaction."
HCI,Human-Computer Interaction,System Design,"Discussing the principles and methods of human-computer interaction system design, involving user requirement analysis, interface design, interaction process planning, and user experience evaluation, including but not limited to prototyping, usability testing, and iterative design processes."
AR,Architecture and Organization,Secure Processor Architectures,"Explore the core concepts of secure processor architecture, including the design principles of hardware security features, the implementation technologies of secure processors, and their applications in protecting systems from malicious software attacks and data breaches."
MSF,Mathematical and Statistical Foundations,Discrete Mathematics,"Explore the fundamental concepts and theories in discrete mathematics, including but not limited to set theory, graph theory, combinatorics, logic, number theory, and probability theory, as well as their applications in computer science, such as algorithm analysis, data structure design, and the basics of cryptography."
MSF,Mathematical and Statistical Foundations,Probability,"Explore the fundamental concepts and principles of probability theory, including random events, probability spaces, conditional probability, Bayes' theorem, discrete and continuous random variables, expected value, variance, law of large numbers, and central limit theorem, as well as their applications in computer science, such as algorithm analysis, machine learning model evaluation, and simulation of random processes."
MSF,Mathematical and Statistical Foundations,Statistics,"Involving core concepts of probability theory, descriptive statistics, inferential statistics, and probability distributions, it discusses how to collect, analyze, interpret, and present data, as well as how to use statistical methods to support decision-making and forecasting."
MSF,Mathematical and Statistical Foundations,Linear Algebra,"Involves the fundamental theories of linear algebra, matrix operations, vector spaces, linear transformations, eigenvalues, and eigenvectors, as well as their applications in computer science, such as graphical transformations, data compression, and machine learning algorithms."
MSF,Mathematical and Statistical Foundations,Calculus,"Involves fundamental concepts and operations of calculus, including limits, continuity, derivatives, integrals, and multivariable calculus, with a focus on exploring the application of these concepts in computer science, such as algorithm analysis, numerical methods, and optimization problems."
NC,Networking and Communication,Fundamentals,"Involves the fundamental principles of computer networks, including key concepts and technologies of network architecture, OSI model, TCP/IP protocol stack, data link layer, network layer, transport layer, and application layer, as well as their roles in building and maintaining network communications."
NC,Networking and Communication,Networked Applications,"Involves the design, development, and deployment of network applications, including but not limited to network service architecture, client-server model, distributed systems, network programming interfaces, protocol stack applications, and the implementation of network security in network applications."
NC,Networking and Communication,Reliability Support,"Involves reliability support mechanisms in network communication, including but not limited to error detection and correction, packet retransmission strategies, congestion control algorithms, and Quality of Service (QoS) assurance techniques."
NC,Networking and Communication,Routing And Forwarding,"Involves the fundamental principles and mechanisms of network routing and forwarding, including the design of routing algorithms, the construction and maintenance of routing tables, the decision-making process for packet forwarding, and the working principles and application scenarios of routing protocols such as BGP and OSPF."
NC,Networking and Communication,Single-Hop Communication,"Involving the basic principles and key technologies of single-hop communication, including data link layer protocols, medium access control methods, error detection and correction mechanisms, and performance optimization strategies for single-hop networks."
NC,Networking and Communication,Mobility Support,"Involving mobility support technologies, including Mobile IP protocol, location management, routing optimization, and mobility security, aimed at providing seamless network connectivity and data transmission for mobile devices."
NC,Networking and Communication,Network Security,"Involves security mechanisms and protocols in network communication, including but not limited to encryption techniques, authentication, access control, intrusion detection systems, firewall configurations, and the implementation and application of security protocols such as SSL/TLS and IPSec."
NC,Networking and Communication,Emerging Topics,"Explore the latest trends in the field of networking and communication, including but not limited to the application and challenges of key technologies such as 5G/6G, Internet of Things (IoT), cybersecurity, Software-Defined Networking (SDN), Network Functions Virtualization (NFV), and edge computing."
OS,Operating Systems,Fault Tolerance,"Discussing fault tolerance mechanisms in operating systems, including but not limited to error detection and recovery techniques, redundant system design, data consistency maintenance, and system monitoring and logging strategies, aims to enhance system stability and reliability."
SDF,Software Development Fundamentals,Fundamental Programming Concepts and Practices,"Introduces fundamental programming concepts and practices, including variables, data types, control structures, functions, modularization, coding style, and debugging techniques."
SDF,Software Development Fundamentals,Fundamental Data Structures,"Involves the design and implementation of basic data structures, including but not limited to arrays, linked lists, stacks, queues, trees, graphs, and hash tables, discussing their time complexity, space complexity, and applicable scenarios."
SDF,Software Development Fundamentals,Algorithms,"Explore the fundamental principles of algorithm design and analysis, including but not limited to sorting, searching, graph algorithms, dynamic programming, and greedy algorithms, as well as their time complexity and space complexity analysis."
SDF,Software Development Fundamentals,Software Development Practices,"Involves best practices and methodologies in the software development process, including key techniques such as agile development, test-driven development, continuous integration and continuous deployment, code review, version control, and project management."
SE,Software Engineering,Teamwork,"Involves team collaboration and management in software development, including agile development methodologies, team communication skills, the use of project management tools, and how to allocate tasks and coordinate workflows within a team."
SE,Software Engineering,Tools and Environments,"Involves tools and environments in the field of software engineering, including but not limited to Integrated Development Environments (IDEs), version control systems (such as Git), automated testing frameworks, Continuous Integration/Continuous Deployment (CI/CD) tools, project management software, and configuration management tools. Discusses how these tools support various stages of the software development lifecycle, from requirements analysis to design, coding, testing, deployment, and maintenance, as well as how they facilitate team collaboration and enhance development efficiency."
SE,Software Engineering,Product Requirements,"Involves the collection, analysis, and definition processes of software product requirements, including the principles, methods, and tools of requirements engineering, as well as how to transform user needs into specific system functions and performance metrics."
SE,Software Engineering,Software Design,"Involves the fundamental principles and methods of software design, including requirement analysis, architectural design, modularization, interface design, selection of data structures, algorithm implementation, and user interface design. Discusses how to improve software maintainability, extensibility, and testability through design patterns and software refactoring."
SE,Software Engineering,Software Construction,"Involving build activities in the software development process, including coding practices, code reviews, unit testing, integration strategies, version control, and continuous integration, among other key technologies, aims to enhance software quality and development efficiency."
SE,Software Engineering,Software Verification and Validation,"Involving methods and techniques for software verification and validation, including unit testing, integration testing, system testing, and acceptance testing, as well as the application of static analysis, dynamic analysis, and formal verification techniques. Discussing how to ensure software correctness, reliability, and user requirement satisfaction through these methods."
SE,Software Engineering,Refactoring and Code Evolution,"The theory and practice of software refactoring and code evolution, including principles of refactoring, application of design patterns, code quality assessment, use of automated refactoring tools, and version control and change management during the code evolution process."
SE,Software Engineering,Software Reliability,"Discussing the assessment methods and improvement strategies for software reliability, including software testing, error analysis, fault-tolerant design, and reliability metrics."
SE,Software Engineering,Formal Methods,"Discussing formal methods in software engineering, including but not limited to specification description languages, model checking, theorem proving, and formal verification techniques, as well as their applications in system design, verification, and testing."
SEP,"Society, Ethics, and the Profession",History,"Explore the development history of computer science, including key technological milestones, significant events, and the impact of computer science on society and culture."
SEP,"Society, Ethics, and the Profession",Economies of Computing,"Discussing the impact of computer technology on the economy, including the transformative effects of digital transformation, cloud computing, big data, and artificial intelligence on industries, employment, and market structures."
SEP,"Society, Ethics, and the Profession","Security Policies, Laws, and Computer Crimes","Involving the basic concepts and frameworks of computer security policies, laws, and computer crime, discussing how to protect the security of information systems under the constraints of law and ethics, including but not limited to data protection regulations, privacy rights, intellectual property rights, and prevention and response strategies for cybercrime."
SEP,"Society, Ethics, and the Profession","Diversity, Equity, Inclusion and Accessibility","Discussing the importance of diversity, equality, inclusion, and accessibility in the field of computer science, including how to identify and address challenges arising from differences in gender, race, culture, and ability, as well as how to promote the accessibility of technology for all through inclusive design and policies."
SF,Systems Fundamentals,System Design,"Involves the fundamental theories and practical methods of system design, including the selection of system architecture, modular design, interface definition, performance evaluation, and considerations for reliability and security. Discusses how to choose appropriate hardware and software components based on different application requirements, and how to verify the effectiveness of the design through system-level simulation and prototype development."
SPD,Specialized Platform Development,Common Aspects,"Involves common issues in platform-specific development, including cross-platform compatibility, hardware abstraction layer design, performance optimization strategies, and programming models and toolchains for specific platforms."
SPD,Specialized Platform Development,Web Platforms,"Core concepts and technologies involved in Web platform development, including front-end technologies such as HTML, CSS, and JavaScript, as well as back-end technologies like Node.js and Express. Discussion on the architectural design, performance optimization, cross-platform compatibility, and security issues of Web applications."
SPD,Specialized Platform Development,Mobile Platforms,"Core concepts and technologies involved in mobile platform development, including but not limited to the architecture of mobile operating systems (such as Android and iOS), application development frameworks, principles of user interface design, interaction patterns unique to mobile devices, and performance optimization and cross-platform compatibility issues of mobile applications."
SPD,Specialized Platform Development,Robot Platforms,"Involves the development of robotic platforms, including but not limited to the use of Robot Operating System (ROS), programming of robotic hardware interfaces, sensor integration, and the implementation of robotic motion control algorithms. Discusses how to customize robotic platforms for different application scenarios and how to enhance the performance and reliability of robots through the collaborative design of software and hardware."
SPD,Specialized Platform Development,Embedded Platforms,"Involves the design and development of embedded platforms, including microcontroller programming, principles of real-time operating systems, hardware interface and driver development, power management strategies, and performance optimization of embedded systems."
SPD,Specialized Platform Development,Game Platforms,"Discussing the development technologies of gaming platforms, including game engine architecture, graphics rendering pipeline, physics engine integration, and cross-platform compatibility design."
SPD,Specialized Platform Development,Interactive Computing Platforms,"Involves the development of interactive computing platforms, including but not limited to user interface design, interactive system architecture, multimodal interaction technologies, and the construction of virtual reality and augmented reality platforms. Discusses how to enhance user experience and system responsiveness through the integration of software and hardware, as well as practical cases of applying interactive computing platforms in specific domains such as gaming, education, and healthcare."
